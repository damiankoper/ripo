@startuml video_processor_cd
allowmixing



class VideoProcessor <<main>>{
    + capture(...)
    + record(...)
}

abstract class FrameProcessor <<process>>{
    + queue: Queue
    + frame: RawArray
    + avgFrame: RawArray
    + eventQueue: Queue
}

note left of FrameProcessor
<b>frame</b> and <b>avgFrame</b> contain
frame data shared
between processors using Locks
end note

class CueProcessor <<process>> {
}

class BallProcessor <<process>> {
}

class OutputModule <<process>> {
    ballsQueue: Queue(Ball[])
    cuesQueue: Queue(Cue[])
}

BallProcessor ..> OutputModule
CueProcessor ..> OutputModule

FrameProcessor <|--- BallProcessor
FrameProcessor <|--- CueProcessor

class Process <<multiprocessing>>


VideoProcessor *--> CueProcessor
VideoProcessor *--> BallProcessor
VideoProcessor *---> OutputModule

FrameProcessor -|> Process

class Cue {
    + positionStart: Vector2i
    + positionEnd: Vector2i
}

class Ball {
    + number: int
    + position: Vector2i
    + type: Enum('SOLID', 'STRIPED')
}

class PoolState {
    + balls: Ball[]
    + cues: Cue[]
}

class InitialFrameProcessing
class Classification
VideoProcessor .> InitialFrameProcessing
BallProcessor .left.> Classification

cloud WebSocket

class QueueWatcher <<thread>>{
    queue: Queue
    list: list
    lock: Lock
    server: WebsocketServer
}
class WebsocketServer <<thread>>

OutputModule *--> PoolState
OutputModule *--> QueueWatcher
OutputModule *--> WebsocketServer
WebsocketServer ..> WebSocket : Sends\nPoolState to >
WebsocketServer .>PoolState

QueueWatcher .> WebsocketServer

CueProcessor ..> Cue
BallProcessor ..>  Ball

@enduml
